 ①
@echo off
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe %1
%~n1.exe



②
C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe /reference:System.Data.SQLite.dll /platform:x86 /target:winexe MyProgram.cs



③
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:Microsoft.Win32.Interop.DLL /r:System.DLL
  /r:System.WinForms.DLL /r:System.Drawing.DLL
  /r:System.Diagnostics.DLL anchor.cs


④
@echo off
rem ソースファイルと同じディレクトリにこのバッチファイルを配置してください。
rem バッチファイルを実行すると同じディレクトリにあるソースファイルがコンパイルされます。
rem バージョン部分は各環境に置き換えて下さい。
cd /d C:\Windows\Microsoft.NET\Framework\v4.0.30319

set srcPath=%~dp0*.cs
set exePath=%~dp0%~n0.exe

set dllPaths=system.dll,system.drawing.dll,system.windows.forms.dll,system.io.dll,System.Reflection.dll

csc.exe /t:winexe /optimize+ /out:%exePath% %srcPath% /r:%dllPaths%

echo %ERRORLEVEL%

if %ERRORLEVEL% == 0 (
  goto SUCCESS
)

pause

:SUCCESS



⑤複数コンパイル
C:\> csc.bat  MyMain.cs  MyClass.cs



⑥失敗
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe　Form1.cs　Form1.Designer.cs TSVDataGetter.cs Program.cs　./ControlManage/ControlDestroyer.cs ./ControlManage/ControlFactory.cs ./Controls/ChoiceTableLayoutPanel.cs ./Controls/ClearButton.cs ./Controls/ComboBoxEX.cs ./Controls/EndAreaFlowPanel.cs ./Controls/LogButton.cs ./Controls/RadioButtonEX.cs ./Controls/ScriptTextBox.cs ./Properties/AssemblyInfo.cs ./Properties/Resources.Designer.cs ./Properties/Settings.Designer.cs


⑦成功！！
cd （以下.csファイルを格納しているフォルダパス）
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe　Form1.cs　Form1.Designer.cs TSVDataGetter.cs Program.cs　ControlDestroyer.cs ControlFactory.cs ChoiceTableLayoutPanel.cs ClearButton.cs ComboBoxEX.cs EndAreaFlowPanel.cs LogButton.cs RadioButtonEX.cs ScriptTextBox.cs AssemblyInfo.cs Resources.Designer.cs Settings.Designer.cs
最新
C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe　Form1.cs AssemblyInfo.cs ChoiceTableLayoutPanel.cs ClearButton.cs ComboBoxEX.cs ControlDestroyer.cs ControlFactory.cs EndAreaFlowPanel.cs Form1.Designer.cs LogButton.cs MyContextMenu.cs PopUpControler.cs　PopUpForm.cs　PopUpForm.Designer.cs　Program.cs　RadioButtonEX.cs　ReferenceLink.cs　Resources.Designer.cs　ScriptTextBox.cs　Settings.Designer.cs　TSVDataGetter.cs


情報
コマンド・プロンプトでC#コンパイラ（csc.exe）を使用してプログラムをコンパイルする場合、.NET Frameworkのクラス・ライブラリに含まれているほとんどのアセンブリ（DLLファイル）は明示的に参照する必要がない。
これは、csc.exeがデフォルトで使用する一連のオプションを記述したファイル「csc.rsp」（応答ファイルと呼ばれる）により、各アセンブリが参照設定されているためである。csc.rspはcsc.exeと同じディレクトリ*に格納されており、実際には次のような内容になっている。
/r:Accessibility.dll
/r:Microsoft.Vsa.dll
/r:System.Configuration.Install.dll
/r:System.Data.dll
/r:System.Design.dll
/r:System.DirectoryServices.dll
/r:System.dll
/r:System.Drawing.Design.dll
/r:System.Drawing.dll
/r:System.EnterpriseServices.dll
/r:System.Management.dll
/r:System.Messaging.dll
/r:System.Runtime.Remoting.dll
/r:System.Runtime.Serialization.Formatters.Soap.dll
/r:System.Security.dll
/r:System.ServiceProcess.dll
/r:System.Web.dll
/r:System.Web.Mobile.dll
/r:System.Web.RegularExpressions.dll
/r:System.Web.Services.dll
/r:System.Windows.Forms.Dll
/r:System.XML.dll

ちなみに、csc.exeのオプションは下記の通り。
たとえば、/t:winexe をつけてコンパイルすれば、コマンドプロンプトが表示されない通常のアプリケーションになります。

                        - 出力ファイル -
/out:<ファイル>                出力ファイル名を指定します (既定: メインクラスかファーストファイルを伴うファイルのベース名)。
/target:exe                    コンソール アプリケーションをビルドします
                               　　　(既定)。 (短い形式: /t:exe)

/target:winexe                Windows 実行可能ファイルをビルドします。
                               　　　(短い形式: /t:winexe)

/target:library                ライブラリをビルドします。 (短い形式: /t:library)
/target:module                 別のアセンブリに追加できるモジュールをビルドします。 (短い形式: /t:module)
/target:appcontainerexe        Appcontainer 実行可能ファイルのビルド (短い形式:/t:appcontainerexe)
/target:winmdobj               WinMDExp で使用される Windowsランタイムの中間ファイルのビルド (短い形式:/t:winmdobj)
/doc:<ファイル>                生成する XML ドキュメント ファイル
/platform:<文字列>             このコードが実行されるプラットフォームの制限:x86、Itanium、x64、arm、anycpu32bitpreferred、または anycpu。既定は anycpu です。

                        - 入力ファイル -
/recurse:<ワイルドカード>      ワイルドカードの指定に従い、現在のディレクトリとサブディレクトリ内のすべてのファイルをインクルードします。
/reference:<エイリアス>=<ファイル>
                               指定されたエイリアスを使用して、指定されたアセン
                               ブリ ファイルからメタベースを参照する (短い形式:
                               /r)
/reference:<ファイル リスト>   指定されたアセンブリファイルからメタベースを参照する (短い形式: /r)
/addmodule:<ファイル リスト>   指定されたモジュールをこのアセンブリにリンクする
/link:<ファイル リスト>        指定された相互運用機能アセンブリファイルからメタデータを埋め込みます (短い形式:/l)

                        - リソース -
/win32res:<ファイル>           Win32 リソース ファイルを指定します (.res)。
/win32icon:<ファイル>          出力にこのアイコンを使用します。
/win32manifest:<ファイル>      Win32 マニフェスト ファイル (.xml)を指定してください。
/nowin32manifest               既定の Win32 マニフェストを含めません。
/resource:<リソース情報>       指定したリソースを埋め込みます。 (短い形式: /res)
/linkresource:<リソース情報>   このアセンブリに指定されたリソースをリンクします。 (短い形式: /linkres)
                               	リソース情報の形式は <ファイル>[,<文字列名>[,public|private]]です。

                        - コード生成 -
/debug[+|-]                    デバッグ情報を生成する
/debug:{full|pdbonly}          デバッグの種類を指定します (既定値は fullで、実行中のプログラムにデバッガーを付加することができます)。
/optimize[+|-]                 最適化を有効にする (短い形式: /o)

                        - エラーと警告 -
/warnaserror[+|-]              すべての警告をエラーとして報告する
/warnaserror[+|-]:<警告リスト> 指定した警告をエラーとして報告する
/warn:<n>                      警告レベル (0-4) を設定する (短い形式: /w)
/nowarn:<警告リスト>           指定の警告メッセージを無効にする

                        - 言語 -
/checked[+|-]                  オーバーフロー チェックの生成
/unsafe[+|-]                   アンセーフ コードの許可
/define:<シンボル リスト>      条件付きコンパイル シンボルを定義する (短い形式:/d)
/langversion:<文字列>          言語バージョン モードの指定:ISO-1、ISO-2、3、4、5、または Default

                        - セキュリティ -
/delaysign[+|-]                厳密な名前のキーのパブリックな部分のみを使ってアセンブリを遅延署名します。
/keyfile:<ファイル>            厳密な名前のキー ファイルを指定します。
/keycontainer:<文字列>         厳密な名前のキー コンテナーを指定します。
/highentropyva[+|-]            高エントロピ ASLR の有効化

                        - その他 -
@<ファイル>                    応答ファイルを読み取り、オプションを追加します。
/help                          この使用法のメッセージを表示します。 (短い形式:/?)
/nologo                        コンパイル時の著作権メッセージを表示しません。
/noconfig                      CSC.RSP ファイルを自動的に含めません。

                        - 詳細 -
/baseaddress:<アドレス>        ビルドするライブラリのベース アドレスです。
/bugreport:<ファイル>          'バグ報告' ファイルを作成します
/codepage:<n>                  ソース
                               ファイルを開くときに使用するコードページを指定し
                               ます。
/utf8output                    UTF-8
                               エンコードでコンパイラのメッセージを出力する
/main:<型>                     エントリ ポイントを含む型を指定します
                               (他のエントリ ポイントはすべて無視します)。
                               (短い形式: /m)
/fullpaths                     コンパイラは絶対パスを生成します。
/filealign:<n>                 出力ファイルセクションで使用する配置を指定します。
/pdb:<ファイル>                デバッグ情報ファイル名を指定します (既定: .pdb拡張子の付いた出力ファイル名)
/errorendlocation              各エラーの終了位置の出力行と出力列
/preferreduilang               出力用の言語名を指定します。
/nostdlib[+|-]                 標準ライブラリ (mscorlib.dll) を参照しない
/subsystemversion:<文字列>     このアセンブリのサブシステムバージョンを指定してください
/lib:<ファイル リスト>         参照を検索する追加のディレクトリを指定します。
/errorreport:<文字列>          内部コンパイラ エラーの処理方法を指定します:prompt、send、queue、または none です。既定値はqueue です。
/appconfig:<ファイル>          アセンブリバインディング設定を含むアプリケーション構成ファイルを指定してください
/moduleassemblyname:<文字列>   このモジュールが一部となるアセンブリ名です


